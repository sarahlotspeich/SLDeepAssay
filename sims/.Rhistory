devtools::install_github("sarahlotspeich/SLDeepAssay")
library(SLDAssay)
## Functions for MLE/bias-corrected MLE with UDSA
## from Lotspeich et al. (2022+)
library(SLDeepAssay)
## Functions for running simulations
library(tidyr)
library(pbapply)
# Number of replicates per simulation setting
num_reps = 2
# Define parameters that remain constant across all settings
M.ratio = c(1, 2, 3) # ratio of number of wells at each dilution level
q = c(0, 0.5, 1) # proportion of p24-positive wells deep-sequenced
u = c(.5, 1, 2) # dilution levels
Tau = 1
# Define parameters that vary over simulation settings
M.scale = c(6, 9, 12)   # M = M.scale * M.ratio
n = c(6, 12, 18)        # number of DVLs
constant_Tau = c(TRUE, FALSE) # indicator of constant IUPM across n DVLs
# Number of simulation settings
num_sett = length(M.scale) * length(n) * length(constant_Tau)
# Create dataframe of different simulation settings
Settings = apply(X = expand.grid("M.scale" = M.scale,
"n" = n,
"constant_Tau" = constant_Tau),
MARGIN = 2,
FUN = function(x) {
rep(x, each = num_reps)
}
) |>
as.data.frame() |>
dplyr::mutate(sim_id = rep(x = seq(1, num_reps), times = num_sett))
# Function one_sim() simulates one assay and returns the output (reshaped)
one_sim = function(setting_row) {
# Save parameter values from row
M.scale = as.numeric(setting_row["M.scale"])
n = as.numeric(setting_row["n"])
constant_Tau = setting_row["constant_Tau"] == 1
if (constant_Tau) {
tau = rep(x = Tau / n, times = n)
} else {
tau = c(rep(Tau / (2 * n), n / 2), rep(3 * Tau / (2 * n), n / 2))
}
res = simulate_SLDeepAssay_md(M = M,
tau = tau,
q = q,
u = u)
res_rshp = cbind(rep = r,
method = c("MLE_woUDSA", "BCMLE_woUDSA", "MLE_wUDSA", "BCMLE_wUDSA"),
do.call(what = rbind, args = res_r[grep(pattern = "MLE", x = names(res_r), value = FALSE)]),
Message = res_r$Message,
Message_Detailed = ifelse(is.null(res_r$Message_Detailed), "", res_r$Message_Detailed))
return(res_rshp)
}
one_sim(Settings[1,])
devtools::install_github("sarahlotspeich/SLDeepAssay")
devtools::install_github("sarahlotspeich/SLDeepAssay")
library(SLDAssay)
## Functions for MLE/bias-corrected MLE with UDSA
## from Lotspeich et al. (2022+)
library(SLDeepAssay)
## Functions for running simulations
library(tidyr)
library(pbapply)
# Number of replicates per simulation setting
num_reps = 2
# Define parameters that remain constant across all settings
M.ratio = c(1, 2, 3) # ratio of number of wells at each dilution level
q = c(0, 0.5, 1) # proportion of p24-positive wells deep-sequenced
u = c(.5, 1, 2) # dilution levels
Tau = 1
# Define parameters that vary over simulation settings
M.scale = c(6, 9, 12)   # M = M.scale * M.ratio
n = c(6, 12, 18)        # number of DVLs
constant_Tau = c(TRUE, FALSE) # indicator of constant IUPM across n DVLs
# Number of simulation settings
num_sett = length(M.scale) * length(n) * length(constant_Tau)
# Create dataframe of different simulation settings
Settings = apply(X = expand.grid("M.scale" = M.scale,
"n" = n,
"constant_Tau" = constant_Tau),
MARGIN = 2,
FUN = function(x) {
rep(x, each = num_reps)
}
) |>
as.data.frame() |>
dplyr::mutate(sim_id = rep(x = seq(1, num_reps), times = num_sett))
# Function one_sim() simulates one assay and returns the output (reshaped)
one_sim = function(setting_row) {
# Save parameter values from row
M.scale = as.numeric(setting_row["M.scale"])
n = as.numeric(setting_row["n"])
constant_Tau = setting_row["constant_Tau"] == 1
if (constant_Tau) {
tau = rep(x = Tau / n, times = n)
} else {
tau = c(rep(Tau / (2 * n), n / 2), rep(3 * Tau / (2 * n), n / 2))
}
res = simulate_SLDeepAssay_md(M = M.scale * M.ratio,
tau = tau,
q = q,
u = u)
res_rshp = cbind(rep = r,
method = c("MLE_woUDSA", "BCMLE_woUDSA", "MLE_wUDSA", "BCMLE_wUDSA"),
do.call(what = rbind, args = res_r[grep(pattern = "MLE", x = names(res_r), value = FALSE)]),
Message = res_r$Message,
Message_Detailed = ifelse(is.null(res_r$Message_Detailed), "", res_r$Message_Detailed))
return(res_rshp)
}
one_sim(Settings[1,])
devtools::install_github("sarahlotspeich/SLDeepAssay")
library(SLDAssay)
## Functions for MLE/bias-corrected MLE with UDSA
## from Lotspeich et al. (2022+)
library(SLDeepAssay)
## Functions for running simulations
library(tidyr)
library(pbapply)
# Number of replicates per simulation setting
num_reps = 2
# Define parameters that remain constant across all settings
M.ratio = c(1, 2, 3) # ratio of number of wells at each dilution level
q = c(0, 0.5, 1) # proportion of p24-positive wells deep-sequenced
u = c(.5, 1, 2) # dilution levels
Tau = 1
# Define parameters that vary over simulation settings
M.scale = c(6, 9, 12)   # M = M.scale * M.ratio
n = c(6, 12, 18)        # number of DVLs
constant_Tau = c(TRUE, FALSE) # indicator of constant IUPM across n DVLs
# Number of simulation settings
num_sett = length(M.scale) * length(n) * length(constant_Tau)
# Create dataframe of different simulation settings
Settings = apply(X = expand.grid("M.scale" = M.scale,
"n" = n,
"constant_Tau" = constant_Tau),
MARGIN = 2,
FUN = function(x) {
rep(x, each = num_reps)
}
) |>
as.data.frame() |>
dplyr::mutate(sim_id = rep(x = seq(1, num_reps), times = num_sett))
# Function one_sim() simulates one assay and returns the output (reshaped)
one_sim = function(setting_row) {
# Save parameter values from row
M.scale = as.numeric(setting_row["M.scale"])
n = as.numeric(setting_row["n"])
constant_Tau = setting_row["constant_Tau"] == 1
if (constant_Tau) {
tau = rep(x = Tau / n, times = n)
} else {
tau = c(rep(Tau / (2 * n), n / 2), rep(3 * Tau / (2 * n), n / 2))
}
res = simulate_SLDeepAssay_md(M = M.scale * M.ratio,
tau = tau,
q = q,
u = u)
res_rshp = cbind(rep = r,
method = c("MLE_woUDSA", "BCMLE_woUDSA", "MLE_wUDSA", "BCMLE_wUDSA"),
do.call(what = rbind, args = res_r[grep(pattern = "MLE", x = names(res_r), value = FALSE)]),
Message = res_r$Message,
Message_Detailed = ifelse(is.null(res_r$Message_Detailed), "", res_r$Message_Detailed))
return(res_rshp)
}
one_sim(Settings[1,])
setting_row = Settings[1,]
# Save parameter values from row
M.scale = as.numeric(setting_row["M.scale"])
n = as.numeric(setting_row["n"])
constant_Tau = setting_row["constant_Tau"] == 1
if (constant_Tau) {
tau = rep(x = Tau / n, times = n)
} else {
tau = c(rep(Tau / (2 * n), n / 2), rep(3 * Tau / (2 * n), n / 2))
}
res = simulate_SLDeepAssay_md(M = M.scale * M.ratio,
tau = tau,
q = q,
u = u)
res_rshp = cbind(rep = r,
method = c("MLE_woUDSA", "BCMLE_woUDSA", "MLE_wUDSA", "BCMLE_wUDSA"),
do.call(what = rbind, args = res_r[grep(pattern = "MLE", x = names(res_r), value = FALSE)]),
Message = res_r$Message,
Message_Detailed = ifelse(is.null(res_r$Message_Detailed), "", res_r$Message_Detailed))
# Save parameter values from row
M.scale = as.numeric(setting_row["M.scale"])
n = as.numeric(setting_row["n"])
constant_Tau = setting_row["constant_Tau"] == 1
if (constant_Tau) {
tau = rep(x = Tau / n, times = n)
} else {
tau = c(rep(Tau / (2 * n), n / 2), rep(3 * Tau / (2 * n), n / 2))
}
res = simulate_SLDeepAssay_md(M = M.scale * M.ratio,
tau = tau,
q = q,
u = u)
# Create indicators of whether data need to be re-simulated
num_redo_all = 0 # Due to any DVL being detected in all wells or
num_redo_none = 0 # No DVL being detected in any wells
# Simulate single-dilution assay data
assay_summary = simulate_assay_md(M = M,
tau = tau,
q = q,
u = u,
remove_undetected = remove_undetected)
M = M.scale * M.ratio
# Simulate single-dilution assay data
assay_summary = simulate_assay_md(M = M,
tau = tau,
q = q,
u = u,
remove_undetected = remove_undetected)
remove_undetected = TRUE
# Simulate single-dilution assay data
assay_summary = simulate_assay_md(M = M,
tau = tau,
q = q,
u = u,
remove_undetected = remove_undetected)
View(assay_summary)
# Check for need to re-simulate
max_p24_neg = tryCatch(expr = max(assay_summary$M - assay_summary$MP),
error = function(e) 0)
min_DVL_neg = tryCatch(expr = min(colSums(assay_summary$m - assay_summary[, grepl("Y", colnames(assay_summary))])),
error = function(e) 0)
while ((max_p24_neg == 0 & min_DVL_neg == 0) | is.null(assay_summary)) {
if (is.null(assay)) {
num_redo_none = num_redo_none + 1
} else {
num_redo_all = num_redo_all + 1
}
# Re-simulate single-dilution assay data
assay_summary = simulate_assay_md(M = M,
tau = tau,
q = q,
u = u,
remove_undetected = remove_undetected)
max_p24_neg = tryCatch(expr = max(assay_summary$M - assay_summary$MP),
error = function(e) 0)
min_DVL_neg = tryCatch(expr = min(colSums(assay_summary$m - assay_summary[, grepl("Y", colnames(assay_summary))])),
error = function(e) 0)
}
# Methods without UDSA
woUDSA_res = get.mle(pos = assay_summary$MP,
replicates = assay_summary$M,
dilutions = assay_summary$u * 10^6)
woUDSA_res
assay_summary$MP
assay_summary$M
assay_summary$u * 10^6
assay_summary$u
devtools::install_github("sarahlotspeich/SLDeepAssay")
library(SLDAssay)
## Functions for MLE/bias-corrected MLE with UDSA
## from Lotspeich et al. (2022+)
library(SLDeepAssay)
## Functions for running simulations
library(tidyr)
library(pbapply)
# Number of replicates per simulation setting
num_reps = 2
# Define parameters that remain constant across all settings
M.ratio = c(1, 2, 3) # ratio of number of wells at each dilution level
q = c(0, 0.5, 1) # proportion of p24-positive wells deep-sequenced
u = c(.5, 1, 2) # dilution levels
Tau = 1
# Define parameters that vary over simulation settings
M.scale = c(6, 9, 12)   # M = M.scale * M.ratio
n = c(6, 12, 18)        # number of DVLs
constant_Tau = c(TRUE, FALSE) # indicator of constant IUPM across n DVLs
# Number of simulation settings
num_sett = length(M.scale) * length(n) * length(constant_Tau)
# Create dataframe of different simulation settings
Settings = apply(X = expand.grid("M.scale" = M.scale,
"n" = n,
"constant_Tau" = constant_Tau),
MARGIN = 2,
FUN = function(x) {
rep(x, each = num_reps)
}
) |>
as.data.frame() |>
dplyr::mutate(sim_id = rep(x = seq(1, num_reps), times = num_sett))
# Function one_sim() simulates one assay and returns the output (reshaped)
one_sim = function(setting_row) {
# Save parameter values from row
M.scale = as.numeric(setting_row["M.scale"])
n = as.numeric(setting_row["n"])
constant_Tau = setting_row["constant_Tau"] == 1
if (constant_Tau) {
tau = rep(x = Tau / n, times = n)
} else {
tau = c(rep(Tau / (2 * n), n / 2), rep(3 * Tau / (2 * n), n / 2))
}
res = simulate_SLDeepAssay_md(M = M.scale * M.ratio,
tau = tau,
q = q,
u = u)
res_rshp = cbind(rep = r,
method = c("MLE_woUDSA", "BCMLE_woUDSA", "MLE_wUDSA", "BCMLE_wUDSA"),
do.call(what = rbind, args = res_r[grep(pattern = "MLE", x = names(res_r), value = FALSE)]),
Message = res_r$Message,
Message_Detailed = ifelse(is.null(res_r$Message_Detailed), "", res_r$Message_Detailed))
return(res_rshp)
}
one_sim(Settings[1,])
}
}
fit_SLDeepAssay_md <- function(assay = NULL,
u = NULL,
assay_summary,
corrected = NULL,
maxit = 1E6,
lb = 1E-6,
ub = Inf) {
# For each dilution level, compute summary data
if (!is.null(assay)) {
assay_summary = vapply(X = 1:D, FUN.VALUE = numeric(7 + n),
FUN = function(d) {
M = ncol(assay[[d]])
n = nrow(assay[[d]])
MN = sum(colSums(assay[[d]]) == 0, na.rm = TRUE)
MP = M - MN
m = MP - sum(is.na(colSums(assay[[d]])))
q = ifelse(MP == 0, 0, m / MP)
Y = rowSums(assay[[d]], na.rm = TRUE)
return((c("u" = u[d], "M" = M, "n" = n,
"MN" = MN, "MP" = MP, "m" = m, "q" = q, "Y" = Y)))
})
assay_summary = as.data.frame(t(assay_summary))
}
# Indicator for whether bias correction should be computed:
# user specified value if provided, else yes if n <= 40
corrected = ifelse(test = is.null(corrected),
yes = assay_summary$n[1] <= 40,
no = corrected)
# Fit MLE
optimization = optim(par = rep(0, assay_summary$n[1]),
fn = function(t)
loglik_md(tau = t, assay_summary = assay_summary),
gr = function(t)
gloglik_md(tau = t, assay_summary = assay_summary),
method = "L-BFGS-B",
control = list(maxit = maxit),
lower = rep(lb, assay_summary$n[1]),
upper = rep(ub, assay_summary$n[1]),
hessian = T)
### parameter estimate
tau_hat = optimization$par
Tau_hat = sum(tau_hat) # MLE of the IUPM
# Fisher information matrix
I <- fisher_md(tau = tau_hat,
M = assay_summary$M,
q = assay_summary$q,
u = assay_summary$u)
# inverse of fisher information
cov <- solve(I)
### variance estimate 4
se <- sqrt(sum(cov))
### confidence interval
ci = exp(c(log(Tau_hat) + c(-1, 1) * (qnorm(0.975) * se / Tau_hat)))
# For large n, do not compute bias correction unless user overrides
if (bc == F) {
Tau_hat_bc = NA
ci_bc = NA
} else {
### bias correction
tau_hat_bc <- BC_md(tau = tau_hat,
M = assay_summary$M,
q = assay_summary$q,
u = assay_summary$u)
# bias-corrected MLE for Tau
Tau_hat_bc <- sum(tau_hat_bc)
# bias corrected CI
ci_bc <- exp(c(log(Tau_hat_bc) + c(-1, 1) *
(qnorm(0.975) * se / Tau_hat_bc)))
}
return(list("mle" = Tau_hat,
"se" = se,
"ci" = ci,
"mle_bc" = Tau_hat_bc,
"ci_bc" = ci_bc))
}
one_sim(Settings[1,])
